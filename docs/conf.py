# -*- coding: utf-8 -*-
#
# psyplot documentation build configuration file, created by
# sphinx-quickstart on Mon Jul 20 18:01:33 2015.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sphinx
import os
import os.path as osp
import sys
import glob
import re
import shutil
import six
import subprocess as spr
from itertools import chain
import sphinx_rtd_theme

from psyplot_gui.common import get_icon as get_psy_icon

if six.PY2:
    from urllib import urlopen
else:
    from urllib.request import urlopen

# make sure, straditize from parent directory is dused
sys.path.insert(0, os.path.abspath('..'))
import straditize

# -- General configuration ------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.autosummary',
    'sphinx.ext.viewcode',
    'sphinx.ext.extlinks',
    'sphinx.ext.napoleon',
    'matplotlib.sphinxext.plot_directive',
    'IPython.sphinxext.ipython_console_highlighting',
    'IPython.sphinxext.ipython_directive',
    'sphinxarg.ext',
    'autodocsumm',
    'sphinx.ext.imgconverter',
    'sphinx_nbexamples',  # just to get the style sheet
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# on_rtd is whether we are on readthedocs.org, this line of code grabbed from
# docs.readthedocs.org
on_rtd = os.environ.get('READTHEDOCS', None) == 'True'

# create the api documentation
if not osp.exists(osp.join(osp.dirname(__file__), 'api')) or on_rtd:
    if osp.exists(osp.join(osp.dirname(__file__), 'api')):
        shutil.rmtree(osp.join(osp.dirname(__file__), 'api'))
    spr.check_call(['bash', 'apigen.bash'])

gui_dir = osp.join(osp.dirname(__file__), 'gui')
if not osp.exists(gui_dir) or on_rtd:
    if osp.exists(gui_dir):
        shutil.rmtree(gui_dir)
    os.mkdir(gui_dir)
    files = chain(
        glob.glob(osp.join(osp.dirname(__file__), '..', 'straditize',
                           'widgets', 'docs', '*.rst')),
        glob.glob(osp.join(osp.dirname(__file__), '..', 'straditize',
                           'widgets', 'docs', '*.png')),
        glob.glob(osp.join(osp.dirname(__file__), '..', 'straditize',
                           'widgets', 'icons', '*.png')))
    for f in files:
        shutil.copyfile(f, osp.join(gui_dir, osp.basename(f)))

tutorial_dir = osp.join(osp.dirname(__file__), 'tutorial')
for base in ['beginner', 'hoya-del-castillo']:
    if osp.exists(osp.join(tutorial_dir, base)):
        shutil.rmtree(osp.join(tutorial_dir, base))
    os.mkdir(osp.join(tutorial_dir, base))
    files = chain(
        glob.glob(osp.join(osp.dirname(__file__), '..', 'straditize',
                           'widgets', 'tutorial', base, '*.rst')),
        glob.glob(get_psy_icon('*.png')),
        glob.glob(osp.join(osp.dirname(__file__), '..', 'straditize',
                           'widgets', 'tutorial', base, '*.png')),
        glob.glob(osp.join(osp.dirname(__file__), '..', 'straditize',
                           'widgets', 'docs', '*.png')),
        glob.glob(osp.join(osp.dirname(__file__), '..', 'straditize',
                           'widgets', 'icons', '*.png')))
    for f in files:
        shutil.copyfile(f, osp.join(tutorial_dir, base, osp.basename(f)))
    with open(osp.join('tutorial', base, base + '-tutorial-intro.rst')) as f:
        s = f.read()
    with open(osp.join('tutorial', base,
                       base + '-tutorial-intro.rst'), 'w') as f:
        f.write(s.replace(':hidden:', ''))
    del s, f

napoleon_use_admonition_for_examples = True

example_gallery_config = {'examples_dirs': [], 'gallery_dirs': []}

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

autodoc_default_flags = ['show_inheritance', 'autosummary']
autoclass_content = 'both'

ipython_savefig_dir = os.path.join(os.path.dirname(__file__), '_static')

# General information about the project.
project = u'straditize'
copyright = u'2018, Philipp Sommer'
author = u'Philipp Sommer'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = re.match('\d+\.\d+\.\d+', straditize.__version__).group()
# The full version, including alpha/beta/rc tags.
release = straditize.__version__

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'sphinx_rtd_theme'
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# Add any paths that contain custom static files (such as style sheets)
# here, relative to this directory. They are copied after the builtin
# static files, so a file named "default.css" will overwrite the builtin
# "default.css".
html_static_path = ['_static']

# otherwise, readthedocs.org uses their theme by default, so no need to specify

# Output file base name for HTML help builder.
htmlhelp_basename = 'straditizedoc'

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = '_static/straditize.png'

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = '_static/straditize.ico'

# Custom sidebar templates, maps document names to template names.
html_sidebars = {
    'index': ['sidebarlogo.html', 'sidebarusefullinks.html', 'searchbox.html'],
    '**': ['sidebarlogo.html', 'relations.html', 'searchbox.html',
           'localtoc.html', 'sidebarusefullinks.html']
}

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # Additional stuff for the LaTeX preamble.
    'preamble': '\setcounter{tocdepth}{10}'
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  (master_doc, 'straditize.tex', u'straditize Documentation',
   u'Philipp Sommer', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'straditize', u'straditize Documentation',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  (master_doc, 'straditize', u'straditize Documentation',
   author, 'psyplot', 'Digitizing stratigraphic diagrams',
   'Miscellaneous'),
]


# -- Options for Epub output ----------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project
epub_author = author
epub_publisher = author
epub_copyright = copyright

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {
    'pandas': ('http://pandas.pydata.org/pandas-docs/stable/', None),
    'numpy': ('https://docs.scipy.org/doc/numpy/', None),
    'matplotlib': ('http://matplotlib.org/', None),
    'seaborn': ('http://seaborn.pydata.org/', None),
    'sphinx': ('http://www.sphinx-doc.org/en/stable/', None),
    'xarray': ('http://xarray.pydata.org/en/stable/', None),
    'cartopy': ('http://scitools.org.uk/cartopy/docs/latest/', None),
    'mpl_toolkits': ('http://matplotlib.org/basemap/', None),
    'sphinx_nbexamples': ('http://sphinx-nbexamples.readthedocs.io/en/latest/',
                          None),
    'psy_maps': (
        'https://psyplot.readthedocs.io/projects/psy-maps/en/latest/', None),
    'psy_simple': (
        'https://psyplot.readthedocs.io/projects/psy-simple/en/latest/', None),
    'psy_reg': ('https://psyplot.readthedocs.io/projects/psy-reg/en/latest/',
                None),
    'psyplot_gui': (
        'http://psyplot.readthedocs.io/projects/psyplot-gui/en/latest/', None),
    'psyplot': (
        'http://psyplot.readthedocs.io/en/latest/', None),
}
if six.PY3:
    intersphinx_mapping['python'] = ('https://docs.python.org/3.6/', None)
else:
    intersphinx_mapping['python'] = ('https://docs.python.org/2.7/', None)


## get link to conda files
#url = "https://api.github.com/repos/Chilipp/psyplot-conda/releases/latest"
#try:
#    response = urlopen(url)
#except Exception as e:
#    logging.getLogger(__name__).warning(
#        'Could not download latest psyplot-conda release from %s!', url,
#        exc_info=True)
#    psy_con_tag = 'v1.0.0'
#else:
#    s = response.read() if six.PY2 else response.read().decode()
#    d = json.loads(s)
#    psy_con_tag = d['tag_name']
#
#psy_con_base = (
#    'https://github.com/Chilipp/psyplot-conda/releases/download/%s' % (
#        psy_con_tag))
#psy_con_v = psy_con_tag[1:] if psy_con_tag.startswith('v') else psy_con_tag
#
#
#extlinks = {
#    'psycon': ('%s/psyplot-conda-%s-%%s' % (psy_con_base, psy_con_v), '')
#    }
